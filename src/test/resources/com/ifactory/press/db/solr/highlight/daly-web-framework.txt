What Is a Web Framework and Why Would I Want to Use One?
Back at the dawn of time (1996–1998), dynamic web sites were coded strictly through the use of the Common Gateway Interface, or CGI. Most sites used simple form-driven methods of retrieving user input, had ad-hoc implementations of features because best practices had not been established, and only supported a minimal amount of reuse or extensibility.

Eventually the web increased in popularity and become accountable for an increasing amount of mission-critical and financial data. Stability, code reuse, and standardization of practices became imperative. Early attempts to unify code libraries resulted in the first wave of web frameworks, which provided convenience methods for common features and streamlined deployment and other kinds of overhead. The use of scripting languages like Perl lost favor, as developers grappled with idiosyncratic legacy code, riddled with security holes, that was often written by non-programmers. "Real" web programming was done with industry-backed languages like Java™ and C#, employing deep layers of abstraction over HTTP. The idea that a "framework" could provide stable APIs and a common language across web products became established practice, especially in the Java community with the introduction of J2EE and web servlets.

By the mid-2000s, many developers thought the pendulum had swung too far to the other side. Heavyweight frameworks that required dozens of configuration files were the norm. Outside of the web development community, traction was building for so-called "agile" development practices that emphasized less up-front modeling, fast iterations, and a process-wide acknowledgment that requirements and features may change quickly.

Agile methodologies had particular resonance with web developers, which became clear with the instant excitement generated by Ruby on Rails (http://www.rubyonrails.org) in 2004. Its emphasis on "convention over configuration" was a breath of fresh air to developers who had struggled with configuration-heavy Java frameworks such as Struts. Ruby's status as a next-generation scripting language inspired programmers who had fond memories of quick Perl projects but did not want to trade flexibility for readability.

The success of Rails thus far has been measured more in interest than in widespread adoption—large data-heavy sites are still produced largely in Java or .NET. Rails has ignited interest not just in the Ruby programming language, but in revisiting scripting languages as valuable tools in web application development. It also pioneered some best practices that, almost overnight, have become expected features in any new web framework, not just in Ruby but in any language.